version: 2.1

executors:
    my-ejecutor:
        docker:
            - image: circleci/node
            
commands:
  sayhello:
    description: "A very simple command for demonstration purposes"
    parameters:
      to:
        type: string
        default: "Hello World"
      morning:
        type: boolean
        default: false
    steps:
      - run: 
            name: "Say Hello"
            command: echo "Hello" << parameters.to >> <<# parameters.morning >>. Good morning!! <</ parameters.morning >>
            
jobs:
    build_1: # this one job
        executor: my-ejecutor
        steps:
            - checkout
            - run: echo "Hello world"
            - run: mkdir -p my_workspace
            - run: echo "New feature" > my_workspace/echo-output
            - persist_to_workspace:
                root: my_workspace
                paths:
                    - echo-output
    build_2: # this another job
        executor: my-ejecutor        
        steps:
            - checkout
            - run: echo "Good morning everyone"
            - attach_workspace:
                at: my_workspace
            - run: |
                if [[ $(cat my_workspace/echo-output) == "New feature" ]]; then
                    echo "It worked!";
                else 
                    echo "Nope!"; exit 1
                fi
            - run: echo "My password is $password"
    build_3: 
        parameters:
            ex: 
                type: executor
            greet:
                type: boolean
                default: false
        executor: << parameters.ex >>
        steps:
            - checkout
            - run: 
                name: "Test 3"
                command: echo "It's Friday!"
            when:
                condition: << parameters.greet >>
                steps:
                    - sayhello:
                        to: "Demian"
                    - sayhello:
                        morning: true
                        to: "John"                
                
workflows:
    version: 2
    one_and_two: # here you can invoke any job, those will run parallel
        jobs:
            - build_1
            - build_2: 
                context: test
                requires:
                    - build_1
    three:
        jobs:
            - build_3:
                ex: my-ejecutor
    four:
        jobs:
            - build_3:
                ex: my-ejecutor
                greet: true
                    
                    